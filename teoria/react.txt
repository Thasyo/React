Seção 02 - FUNDAMENTOS DO REACT

    - CRIANDO COMPONENTES

        -> Na maioria dos projetos, os componentes ficam em uma pasta chamada de "components", que devemos criar;
        -> Geralmente, são criados com a Camel Case: "FirstComponent.js";
        -> Neste arquivo, criamos uma função, que contém o código deste componente (lógica e o template);
        -> Também, devemos exportar essa função, a fim de reutilizá-la;
    
    - IMPORTANDO COMPONENTES

        -> A importação é a maneira que temos de reutilizar o componente;
        -> Utilizamos a sintaxe: import <NOME_COMPONENTE> from './componentes/<NOME_COMPONENTE>';
        -> Para colocar o componente importado em outro componente, precisamos colocá-lo em forma de tag: <FirstComponent/>;
        -> E então finalizamos o ciclo de importação;

    - JSX

        -> JSX é o HTML do React;
        -> Onde vamos declarar as tags de HTML que serão exibidas no navegador;
        -> Ficam no Return do componente;
        -> Temos algumas diferenças do HTML, por exemplo: class será "className";
        -> Isso se dá pelas instruções semelhantes de JS e HTML, pois o JSX é JavaScript, então algumas terão nomes diferentes;
        -> O JSX pode ter apenas UM elemento pai;

    - COMENTÁRIOS

        -> Os comentários, são colocados de duas maneiras:
        -> 1: Na parte da função, onde é executada a lógica, a sintaxe é: //algum comentário
        -> 2: No JSX: {/*algum comentário*/};
        -> Os comentários não aparecem no console do projeto;
    
    - TEMPLATE EXPRESSIONS

        -> É o recurso que nos permite executar JS no JSX e também interpolar variáveis;
        -> Isso será muito útil ao longo dos seus projetos em React;
        -> A sintaxe é: {algumCódigoEmJS};
        -> Tudo que está entre chaves é processado em JavaScript e nos retorna um resultado;


    - HIERARQUIA DE COMPONENTES

        -> Os componentes que criamos, podem ser reutilizados em vários componentes;
        -> E ainda componentes podem formar uma hierarquia, sendo importados uns dentro dos outros, como fizemos no "App.js";

    - EVENTO DE CLICK

        -> Os eventos para o front-end são essenciais;
        -> Em várias situações, vamos precisar do click, cmo ao enviar formulários;
        -> No react, os eventos já estão "prontos", podemos utilizar o 'onClick' para ativar uma função ao clicar em um elemento;
        -> Esta função é criada na própria função do componente;
        -> As funções, geralmente, tem o padrão "handleAlgumaCoisa";

    - FUNÇÕES NO EVENTO

        -> Quando as funções são simples, podemos realizar a lógica no próprio evento;
        -> Isso torna nosso código mais "complicado", por atrelar lógica com HTML;
        -> Mas em algumas situações, é aplicável;

    - FUNÇÕES DE RENDERIZAÇÃO

        -> Podemos criar funções que retornam JSX;
        -> Isso serve para criasr situações que dependam de outras condições;
        -> Ou seja, o JSX a ser renderizado pode variar por alguma variável, por exemplo;

Seção 03 - AVANÇANDO EM REACT

    - IMAGENS NO REACT

        -> As imagens públicas do nosso projeto podem ficar na pasta "public";
        -> De lá, elas podem ser chamadas pelas tags 'img' diretamente pelo '/nome.jpg';
        -> Pois a pasta 'public' fica linkada com o src das imagens;

    - IMAGENS EM UMA PASTA ESPECÍFICA

        -> A pasta 'public' pode ser utilizada para colocar imagens, como fizemos anteriormente;
        -> Mas um padrão bem utilizado para as imagens dos projetos, é colocar em uma pasta chamadas 'assets', em 'src';
        -> Ou seja, você vai encontrar projetos com as duas abordagens;
        -> Em 'assets', precisamos importar as imagens, e o 'src' é dinâmico com o nome da importação; 
    
    - O QUE SÃO HOOKS?

        -> Recursos do React que tem diversas funções;
        -> Como: guardar e alterar o estado de algum dado na nossa aplicação;
        -> Todos os hooks começam com o 'use', por exemplo: useState;
        -> Podemos criar nossos próprios hooks, isso é chamado de 'custom hook';
        -> Os hooks precisam ser importados;
        -> Geralmente, são úteis em todas as aplicações, utilizaremos diversos ao longo do curso;

    - USESTATE HOOK

        -> Utilizamos para gerenciar o estado de algum dado, variáveis não funcionam corretamente, o componente não re-renderiza;
        -> Para guardar o dado, definimos o nome da variável e para alterar, vamos utilizar o 'setNome', onde nome é o nome do nosso dado;

    - RENDERIZAÇÃO DE LISTA

        -> Uma outra ação bem comum, é renderizar listas de dados no template;
        -> Fazemops isso com os dados com tipo de array;
        -> UtilizandO O MÉTODO 'MAP' para nos auxiliar;
        -> Além dos dados, podemos inserir JSX em cada iteração;


    - A PROPRIEDADE 'KEY'

        -> Iterar listas sem a propriedade key, nos gera um "warning", podemos verificar isso no console;
        -> O react precisa de uma chave única em cada um dos itens listado;
        -> Isso serve para ajudá-lo na renderização do componente;
        -> Geralmente, teremos um array de objetos e podemos colocar 'key' como alguma chave única, como o id de algum dado;
        -> Em último caso, devemos utilizar o index do método map;

    - PREVIOUS STATE

        -> É um recurso que nos permite pegar o dado em seu valor original dentro de um set de dado;
        -> Isso é muito utilizado para modificar listas, pois temos o valor antigo e transformamos em um valor novo;
        -> O primeiro argumento de um set sempre será o "previous state";

    - RENDERIZAÇÃO CONDICIONAL

        -> É quando imprimimos uma parte do template baseado em uma condição;
        -> Isso é interessante em situações como: usuário autenticado/não autenticado;
    
    - IF E ELSE NO JSX

        -> Aqui, utilizamos o if ternário;
        -> sintaxe: <condição> ? <bloco 01> : <bloco 02>;









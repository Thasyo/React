Seção 02 - FUNDAMENTOS DO REACT

    - CRIANDO COMPONENTES

        -> Na maioria dos projetos, os componentes ficam em uma pasta chamada de "components", que devemos criar;
        -> Geralmente, são criados com a Camel Case: "FirstComponent.js";
        -> Neste arquivo, criamos uma função, que contém o código deste componente (lógica e o template);
        -> Também, devemos exportar essa função, a fim de reutilizá-la;
    
    - IMPORTANDO COMPONENTES

        -> A importação é a maneira que temos de reutilizar o componente;
        -> Utilizamos a sintaxe: import <NOME_COMPONENTE> from './componentes/<NOME_COMPONENTE>';
        -> Para colocar o componente importado em outro componente, precisamos colocá-lo em forma de tag: <FirstComponent/>;
        -> E então finalizamos o ciclo de importação;

    - JSX

        -> JSX é o HTML do React;
        -> Onde vamos declarar as tags de HTML que serão exibidas no navegador;
        -> Ficam no Return do componente;
        -> Temos algumas diferenças do HTML, por exemplo: class será "className";
        -> Isso se dá pelas instruções semelhantes de JS e HTML, pois o JSX é JavaScript, então algumas terão nomes diferentes;
        -> O JSX pode ter apenas UM elemento pai;

    - COMENTÁRIOS

        -> Os comentários, são colocados de duas maneiras:
        -> 1: Na parte da função, onde é executada a lógica, a sintaxe é: //algum comentário
        -> 2: No JSX: {/*algum comentário*/};
        -> Os comentários não aparecem no console do projeto;
    
    - TEMPLATE EXPRESSIONS

        -> É o recurso que nos permite executar JS no JSX e também interpolar variáveis;
        -> Isso será muito útil ao longo dos seus projetos em React;
        -> A sintaxe é: {algumCódigoEmJS};
        -> Tudo que está entre chaves é processado em JavaScript e nos retorna um resultado;


    - HIERARQUIA DE COMPONENTES

        -> Os componentes que criamos, podem ser reutilizados em vários componentes;
        -> E ainda componentes podem formar uma hierarquia, sendo importados uns dentro dos outros, como fizemos no "App.js";

    - EVENTO DE CLICK

        -> Os eventos para o front-end são essenciais;
        -> Em várias situações, vamos precisar do click, cmo ao enviar formulários;
        -> No react, os eventos já estão "prontos", podemos utilizar o 'onClick' para ativar uma função ao clicar em um elemento;
        -> Esta função é criada na própria função do componente;
        -> As funções, geralmente, tem o padrão "handleAlgumaCoisa";

    - FUNÇÕES NO EVENTO

        -> Quando as funções são simples, podemos realizar a lógica no próprio evento;
        -> Isso torna nosso código mais "complicado", por atrelar lógica com HTML;
        -> Mas em algumas situações, é aplicável;

    - FUNÇÕES DE RENDERIZAÇÃO

        -> Podemos criar funções que retornam JSX;
        -> Isso serve para criasr situações que dependam de outras condições;
        -> Ou seja, o JSX a ser renderizado pode variar por alguma variável, por exemplo;

    








